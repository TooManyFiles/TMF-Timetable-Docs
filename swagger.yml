openapi: 3.0.0
info:
  title: School Timetable API
  description: |
    API for managing school timetables, users, and classes.
    All requests may return 500 if an internal server error occurs
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
tags:
  - name: user
    description: Operations about user.
  - name: view
    description: Operations about showing the timetable.
  - name: cafeteria
    description: Operations about cafeteria.
  - name: untis
    description: Operations about subjects, teachers, classes, and rooms.
  - name: login
    description: Operations about login.
  - name: choice
    description: Operations about choices.
paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
          - user
      summary: Create a new user
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userData:
                  $ref: '#/components/schemas/User'
                password:
                  type: string
                  example: "Very secure Password!!!"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Password to long or dose not mach requirements.
          content:
            text/plain:
              schema:
                type: string
              examples:
                PasswordInvalid:
                  value: "Password dose not match the requirements."
                PasswordTooLong:
                  value: "Password too long."
        '409':
          description: User already exists.
  /users/{userId}:
    get:
      tags:
        - user
      summary: Get a user by ID
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update a user by ID
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete a user by ID
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /users/{userId}/choices/{choiceId}:
    get:
      tags:
        - choice
      summary: Get a choice by userId and choiceId
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: choiceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Choice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Choice'
        '404':
          description: User or choice not found
    post:
      tags:
        - choice
      summary: Modify or create a choice by userId and choiceId
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: choiceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Choice'
      responses:
        '200':
          description: Updated to
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Choice'
        '404':
          description: User or choice not found
  /users/{userId}/choices:
    get:
      tags:
        - choice
      summary: Get choices by userId
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Choice'
        '404':
          description: User not found
  /view/user/{userId}:
    put:
      tags:
        - view
      summary: Get events of a week by a user
      security:
      - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 7
            default: 1
            description: The amount of days the response should include.
      requestBody:
        description: Filtering the output
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                untis:
                  type: object
                  properties:
                    Choice:
                      $ref: '#/components/schemas/Choice'
                provider:
                  type: array
                  items: 
                    type: string
                    enum: [untis, cafeteria]
                  example: [untis, cafeteria]
              required:
                - provider
            examples:
              ByID:
                value: |
                  {
                    "untis":{
                      "Choice": {
                        "id": 0
                      }
                    },
                    "provider": [
                      "untis",
                      "cafeteria"
                    ]
                  }
                description: gets all events filtered with a existing Choice by the user
              Custom:
                value: |
                  {
                    "untis":{
                      "Choice": {
                        "Choice": "{1:[1,4,100]}"
                      }
                    },
                    "provider": [
                      "untis",
                      "cafeteria"
                    ]
                  }
                description: gets all events filtered with the custom Choice

      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  untis:
                    type: array
                    items:
                      $ref: '#/components/schemas/Lesson'
                  cafeteria:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '204':
          description: No events in this time frame. 
          content:
            application/json:
              schema:
                type: object
                example: "{}"
  /view:
    put:
      tags:
        - view
      summary: Get events by a user
      security:
      - BearerAuth: []
      parameters:
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 7
            default: 1
            description: The amount of days the response should include.
      requestBody:
        description: Filtering the output
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                untis:
                  type: object
                  properties:
                    Choice:
                      $ref: '#/components/schemas/Choice'
                provider:
                  type: array
                  items: 
                    type: string
                    enum: [untis, cafeteria]
                  example: [untis, cafeteria]
              required:
                - provider
            examples:
              ByID:
                value: |
                  {
                    "untis":{
                      "Choice": {
                        "id": 0
                      }
                    },
                    "provider": [
                      "untis",
                      "cafeteria"
                    ]
                  }
                description: gets all events filtered with a existing Choice by the user
              Custom:
                value: |
                  {
                    "untis":{
                      "Choice": {
                        "Choice": "{1:[1,4,100]}"
                      }
                    },
                    "provider": [
                      "untis",
                      "cafeteria"
                    ]
                  }
                description: gets all events filtered with the custom Choice

      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  untis:
                    type: array
                    items:
                      $ref: '#/components/schemas/Lesson'
                  cafeteria:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
        '401':
          description: Unauthorized
        '204':
          description: No events in this time frame.
          content:
            application/json:
              schema:
                type: object
                example: "{}"
  /login:
    post:
      tags:
        - login
      summary: Login and get a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "yourpasswordhash"
                  description: yourpassword hashed with SHA256
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "your.jwt.token.here"
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - wrong credentials
        '400':
          description: Bad request - Invalid request body
  /logout:
    post:
      tags:
        - login
      summary: Logout and invalidate token
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized - not logged in
  /currentUser:
    get:
      tags:
        - login
      summary: Returns currently logged in user.
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Information about currently logged in user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - not logged in
  /cafeteria:
    get: 
      summary: Get Menu in a defined time frame.
      tags:
        - cafeteria
      parameters:
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 7
            default: 1
            description: The amount of days the response should include.
      responses:
        '200':
          description: The Menu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '401':
          description: Unauthorized
        '204':
          description: No Menu in this time frame.
          content:
            application/json:
              schema:
                type: object
                example: "[]"
  /untis/subjects:
    get:
      tags:
        - untis
      summary: Get all subjects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '401':
          description: Unauthorized - Authentication required

  /untis/teachers:
    get:
      tags:
        - untis
      summary: Get all teachers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        '401':
          description: Unauthorized - Authentication required

  /untis/classes:
    get:
      tags:
        - untis
      summary: Get all classes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized - Authentication required

  /untis/rooms:
    get:
      tags:
        - untis
      summary: Get all rooms
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized - Authentication required

  /untis/fetch:
    get:
      tags:
        - untis
      summary: Fetch static data(rooms, teachers, classes) from Untis. (admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully fetch static data. 
        '401':
          description: Unauthorized - Authentication required

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          minimum: 0
          readOnly: true
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        role:
          type: string
          enum: [student, teacher, admin]
          example: "student"
        classes:
          type: array
          items:
            type: integer
            example: 1
            minimum: 0
            description: class ID
        defaultChoice:
          $ref: '#/components/schemas/Choice'
      required:
        - id
        - name
    Choice:
      type: object
      properties:
        id:
          type: integer 
        name:
          type: string
          example: "Normal"
        userId:
          type: integer
        Choice:
          type: object
          additionalProperties: true
          example: "{1:[1,4,100]}"
      description: |
        Choice of subjects for the classes. {class:[subjects]}
        - If a class has a empty array as a choice all subjects should be shown.
        - If the Class ID is negative it the the choice is a blacklist.
        - If a Class ID is present as a negative as well as a positive value only the positive should be used.
    Class:
      type: object
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
        name:
          type: string
          example: "5a"
        mainTeacherId:
          type: integer
          example: 1
        secondaryTeacherId:
          type: integer
          example: 1
        mainClassLeaderId:
          type: integer
          example: 1
        secondaryClassLeaderId:
          type: integer
          example: 1
    Lesson:
      type: object
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
        subjects:
          type: array
          items:
            type: integer
            example: 1
            description: SubjectID
        teachers:
          type: array
          items:
            type: integer
            example: 1
            description: TeacherID
        classes:
          type: array
          items:
            type: integer
            example: 1
        startTime:
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
        endTime:
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
        rooms:
          type: array
          items:
            type: integer
            example: 1
        lessonType:
          type: string
          enum:
            - "ls"
            - "oh"
            - "sb"
            - "bs"
            - "ex"
          description: 
            //„ls“ (lesson) | „oh“ (office hour) | „sb“ (standby) | „bs“ (break supervision) | „ex“(examination)  omitted if lesson
        cancelled:
          type: boolean
        irregular:
          type: boolean
        additionalInformation:
          type: string
        homework:
          type: string
        lastUpdate:
          type: string
          format: date-time
      required:
        - id
        - startTime
        - endTime
        - lessonType        
    Subject:
      type: object
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
        name:
          type: string
          example: "Mathematics"
        shortName:
          type: string
          example: "Mathematics"
    Teacher:
      type: object
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
        userId:
          type: integer
        name:
          type: string
          example: "Mustermann"
        firstName:
          type: string
          example: "Max"
        shortName:
          type: string
          example: "MM"
        pronoun:
          type: string
        title:
          type: string
    Room:
      type: object
      properties:
        id:
          type: integer
          example: 101
          readOnly: true
        name:
          type: string
          example: "110"
        additionalInformation:
          type: string
          example: "Computerraum"

    Menu:
      type: object
      properties:
        date:
          type: string
          format: date
        cookteam:
          type: string
        mainDish:
          type: string
        mainDishVeg:
          type: string
        garnish:
          type: string
        dessert:
          type: string
      required:
        - date

